// <auto-generated />
using System;
using EvaLabs.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EvaLabs.Domain.Migrations
{
    [DbContext(typeof(EvaContext))]
    partial class EvaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EvaLabs.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("AreaName");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("CreatorId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastModifiedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("ModifierId");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("CityId")
                        .HasDatabaseName("IX_Areas_CityId");

                    b.ToTable("Areas", "dbo");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("AreaId");

                    b.Property<string>("BranchAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("BranchAddress");

                    b.Property<string>("BranchName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("BranchName");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("CreatorId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("LabId");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastModifiedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("ModifierId");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("AreaId")
                        .HasDatabaseName("IX_Branches_AreaId");

                    b.HasIndex("LabId")
                        .HasDatabaseName("IX_Branches_LabId");

                    b.ToTable("Branches", "dbo");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("CityName");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("CreatorId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastModifiedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("ModifierId");

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("Cities", "dbo");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.Lab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("CreatorId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("LabLogo")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("LabLogo");

                    b.Property<string>("LabName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("LabName");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastModifiedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("ModifierId");

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("Labs", "dbo");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AtHome")
                        .HasColumnType("bit")
                        .HasColumnName("AtHome");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("CreatorId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastModifiedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("ModifierId");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)")
                        .HasColumnName("Price");

                    b.Property<string>("TestDetails")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("TestDetails");

                    b.Property<string>("TestName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("TestName");

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("Tests", "dbo");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.TestBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchId");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("CreatorId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastModifiedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("ModifierId");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestId");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("BranchId")
                        .HasDatabaseName("IX_TestBranchs_BranchId");

                    b.HasIndex("TestId")
                        .HasDatabaseName("IX_TestBranchs_TestId");

                    b.ToTable("TestBranchs", "dbo");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.TestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("CreatorId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastModifiedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("ModifierId");

                    b.Property<string>("Result")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Result");

                    b.Property<int>("UserTestId")
                        .HasColumnType("int")
                        .HasColumnName("UserTestId");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("UserTestId")
                        .IsUnique()
                        .HasDatabaseName("IX_TestResult_UserTestId");

                    b.ToTable("TestResults", "dbo");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.TestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("CreatorId");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastModifiedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("ModifierId");

                    b.Property<string>("StatusName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("StatusName");

                    b.HasKey("Id")
                        .IsClustered();

                    b.ToTable("TestStatuses", "dbo");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("CreatorId");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastModifiedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("ModifierId");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserPassword");

                    b.Property<string>("UserType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserType");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("IX_EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("IX_UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "dbo");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.UserTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AreaId")
                        .HasColumnType("int")
                        .HasColumnName("AreaId");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchId");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("CreationDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("CreatorId");

                    b.Property<string>("HomeAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("HomeAddress");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int>("LabId")
                        .HasColumnType("int")
                        .HasColumnName("LabId");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("LastModifiedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(120)
                        .HasColumnName("ModifierId");

                    b.Property<DateTime>("ResultDate")
                        .HasColumnType("date")
                        .HasColumnName("ResultDate");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("date")
                        .HasColumnName("TestDate");

                    b.Property<int>("TestId")
                        .HasColumnType("int")
                        .HasColumnName("TestId");

                    b.Property<int>("TestLocation")
                        .HasColumnType("int")
                        .HasColumnName("TestLocation");

                    b.Property<decimal>("TestPrice")
                        .HasPrecision(18, 6)
                        .HasColumnType("decimal(18,6)")
                        .HasColumnName("TestPrice");

                    b.Property<int>("TestStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TestStatusId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .IsClustered();

                    b.HasIndex("AreaId")
                        .HasDatabaseName("IX_UserTests_AreaId");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("IX_UserTests_BranchId");

                    b.HasIndex("CityId")
                        .HasDatabaseName("IX_UserTests_CityId");

                    b.HasIndex("LabId")
                        .HasDatabaseName("IX_UserTests_LabId");

                    b.HasIndex("TestId")
                        .HasDatabaseName("IX_UserTests_TestId");

                    b.HasIndex("TestStatusId")
                        .HasDatabaseName("IX_UserTests_TestStatusId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_UserTests_UserId");

                    b.ToTable("UserTests", "dbo");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.Area", b =>
                {
                    b.HasOne("EvaLabs.Domain.Entities.City", "City")
                        .WithMany("Areas")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Areas_Cities_CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.Branch", b =>
                {
                    b.HasOne("EvaLabs.Domain.Entities.Area", "Area")
                        .WithMany("Branches")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_Branches_Areas_AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaLabs.Domain.Entities.Lab", "Lab")
                        .WithMany("Branches")
                        .HasForeignKey("LabId")
                        .HasConstraintName("FK_Branches_Labs_LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.TestBranch", b =>
                {
                    b.HasOne("EvaLabs.Domain.Entities.Branch", "Branch")
                        .WithMany("TestBranches")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_TestBranchs_Branches_BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaLabs.Domain.Entities.Test", "Test")
                        .WithMany("TestBranches")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_TestBranchs_Tests_TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.TestResult", b =>
                {
                    b.HasOne("EvaLabs.Domain.Entities.UserTest", "UserTest")
                        .WithOne("TestResult")
                        .HasForeignKey("EvaLabs.Domain.Entities.TestResult", "UserTestId")
                        .HasConstraintName("FK_TestResult_UserTest_UserTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTest");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.UserTest", b =>
                {
                    b.HasOne("EvaLabs.Domain.Entities.Area", "Area")
                        .WithMany("UserTests")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_UserTests_Areas_AreaId");

                    b.HasOne("EvaLabs.Domain.Entities.Branch", "Branch")
                        .WithMany("UserTests")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_UserTests_Branches_BranchId");

                    b.HasOne("EvaLabs.Domain.Entities.City", "City")
                        .WithMany("UserTests")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_UserTests_Cities_CityId");

                    b.HasOne("EvaLabs.Domain.Entities.Lab", "Lab")
                        .WithMany("UserTests")
                        .HasForeignKey("LabId")
                        .HasConstraintName("FK_UserTests_Labs_LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaLabs.Domain.Entities.Test", "Test")
                        .WithMany("UserTests")
                        .HasForeignKey("TestId")
                        .HasConstraintName("FK_UserTests_Tests_TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaLabs.Domain.Entities.TestStatus", "TestStatus")
                        .WithMany("UserTests")
                        .HasForeignKey("TestStatusId")
                        .HasConstraintName("FK_UserTests_TestStatuses_TestStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvaLabs.Domain.Entities.User", "User")
                        .WithMany("UserTests")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserTests_AspNetUsers_UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Branch");

                    b.Navigation("City");

                    b.Navigation("Lab");

                    b.Navigation("Test");

                    b.Navigation("TestStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.Area", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.Branch", b =>
                {
                    b.Navigation("TestBranches");

                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.City", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.Lab", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.Test", b =>
                {
                    b.Navigation("TestBranches");

                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.TestStatus", b =>
                {
                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.User", b =>
                {
                    b.Navigation("UserTests");
                });

            modelBuilder.Entity("EvaLabs.Domain.Entities.UserTest", b =>
                {
                    b.Navigation("TestResult");
                });
#pragma warning restore 612, 618
        }
    }
}
